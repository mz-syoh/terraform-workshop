<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Provisioning on Terraform Workshop</title>
    <link>/terraform-workshop/provisioning/</link>
    <description>Recent content in Provisioning on Terraform Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    
	<atom:link href="/terraform-workshop/provisioning/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Backend</title>
      <link>/terraform-workshop/provisioning/backend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/provisioning/backend/</guid>
      <description>Terraform state 정보를 저장할 S3 Bucket 를 생성 합니다.
 export REGION=&amp;quot;ap-northeast-2&amp;quot; export BUCKET=&amp;quot;terraform-workshop-seoul&amp;quot;  aws s3 mb s3://${BUCKET} --region ${REGION}   중복 실행을 막기 위해, DynamoDB Table 을 생성 합니다.
 aws dynamodb create-table \ --table-name ${BUCKET} \ --attribute-definitions AttributeName=LockID,AttributeType=S \ --key-schema AttributeName=LockID,KeyType=HASH \ --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \ --region ${REGION}  S3 Bucket 이름으로 사용되는 terraform-workshop-seoul 은 다른 사용자와 중복될수 있습니다. 본인의 닉네임 등을 사용하여 유니크한 이름을 부여하도록 합니다.</description>
    </item>
    
    <item>
      <title>Clone</title>
      <link>/terraform-workshop/provisioning/clone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/provisioning/clone/</guid>
      <description> 환경 구성에 필요한 소스를 복제 합니다.
 git clone https://github.com/mzcdev/terraform-env-workshop  </description>
    </item>
    
    <item>
      <title>VPC</title>
      <link>/terraform-workshop/provisioning/vpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/provisioning/vpc/</guid>
      <description>Public subnet 과 Private subnet 을 포함한 VPC 를 생성 합니다.
  다음 파일에서 terraform-workshop-seoul 을 생성한 버켓명으로 변경해줍니다.
 # export BUCKET=&amp;quot;terraform-nalbam-seoul&amp;quot; cd terraform-env-workshop/vpc sed -i &amp;quot;s/terraform-workshop-seoul/${BUCKET}/g&amp;quot; ./main.tf sed -i &amp;quot;s/terraform-workshop-seoul/${BUCKET}/g&amp;quot; ./variable.tf   Terraform 명령으로 생성 합니다.
 terraform init terraform plan terraform apply   다음과 같은 메세지가 출력 되면 성공 입니다.
 Apply complete! Resources: x added, 0 changed, 0 destroyed. Outputs: nat_ip = [ &amp;quot;52.</description>
    </item>
    
    <item>
      <title>EKS</title>
      <link>/terraform-workshop/provisioning/eks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/provisioning/eks/</guid>
      <description>EKS cluster 를 생성하고, on-demand 와 spot instance 로 구성된 Worker node 를 생성 합니다.
  다음 파일에서 terraform-workshop-seoul 을 생성한 버켓명으로 변경해줍니다.
 # export BUCKET=&amp;quot;terraform-nalbam-seoul&amp;quot; cd terraform-env-workshop/eks sed -i &amp;quot;s/terraform-workshop-seoul/${BUCKET}/g&amp;quot; ./main.tf sed -i &amp;quot;s/terraform-workshop-seoul/${BUCKET}/g&amp;quot; ./variable.tf   Terraform 명령으로 생성 합니다.
 terraform init terraform plan terraform apply   다음과 같은 메세지가 출력 되면 성공 입니다.
 Apply complete! Resources: x added, 0 changed, 0 destroyed.</description>
    </item>
    
    <item>
      <title>Lambda API</title>
      <link>/terraform-workshop/provisioning/lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/terraform-workshop/provisioning/lambda/</guid>
      <description>다음 파일에서 terraform-workshop-seoul 을 생성한 버켓명으로 변경해줍니다.
 # export BUCKET=&amp;quot;terraform-nalbam-seoul&amp;quot; cd terraform-env-workshop/lambda sed -i &amp;quot;s/terraform-workshop-seoul/${BUCKET}/g&amp;quot; ./main.tf sed -i &amp;quot;s/terraform-workshop-seoul/${BUCKET}/g&amp;quot; ./variable.tf   Terraform 명령으로 생성 합니다.
 terraform init terraform plan terraform apply   다음과 같은 메세지가 출력 되면 성공 입니다.
 Apply complete! Resources: x added, 0 changed, 0 destroyed. Outputs: invoke_url = https://8zgxxav8oi.execute-api.ap-northeast-2.amazonaws.com/dev   lambda api 가 동작 하는지 테스트 해봅시다.
 invoke_url=&amp;quot;https://8zgxxav8oi.execute-api.ap-northeast-2.amazonaws.com/dev&amp;quot; curl -sL -X POST -d &amp;quot;{\&amp;quot;data\&amp;quot;:\&amp;quot;ok\&amp;quot;}&amp;quot; ${invoke_url}/demo | jq .</description>
    </item>
    
  </channel>
</rss>